<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C语言 | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/blog/categories/cyu-yan/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2013-11-07T18:14:56+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[strcpy和memcpy的区别]]></title>
    <link href="http://calvinlee.github.io/blog/2013/02/25/strcpy-memcpy/"/>
    <updated>2013-02-25T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2013/02/25/strcpy-memcpy</id>
    <content type="html"><![CDATA[<p>今天被问到strcpy和memcpy的区别，一时语塞，于是研究一下记录下来。</p>

<h3>strcpy</h3>

<pre><code>   #include &lt;string.h&gt;
   char *strcpy(char *dest, const char *src);
</code></pre>

<p>它的作用是将src指向的字符串，包括最后的'\0'，拷贝到dest指向的字符串。它的一个简单实现如下：</p>

<pre><code>       char*
       strncpy(char *dest, const char *src, size_t n){
           size_t i;

           for (i = 0 ; i &lt; n &amp;&amp; src[i] != '\0' ; i++)
               dest[i] = src[i];
           for ( ; i &lt; n ; i++)
               dest[i] = '\0';

           return dest;
       }
</code></pre>

<p>也就是说，strcpy会从头开始依次拷贝每个字符，但是一旦遇到了空字符NULL（'\0'），strcpy就会停止拷贝。</p>

<h3>memcpy</h3>

<pre><code>   #include &lt;string.h&gt;
   void *memcpy(void *dest, const void *src, size_t n);
</code></pre>

<p>memcpy用来进行内存拷贝，它将src指向的地址后的n个字节拷贝到dest开始的内存里，可以用它拷贝任何内型的数据对象。</p>

<hr />

<p>以下是stackoverflow上的一个demo，它清楚的显示了这两个函数的区别：</p>

<pre><code>void dump5(char *str);

int main()
{
    char s[5]={'s','a','\0','c','h'};

    char membuff[5]; 
    char strbuff[5];
    memset(membuff, 0, 5); // init both buffers to nulls
    memset(strbuff, 0, 5);

    strcpy(strbuff,s);
    memcpy(membuff,s,5);

    dump5(membuff); // show what happened
    dump5(strbuff);

    return 0;
}

void dump5(char *str)
{
    char *p = str;
    for (int n = 0; n &lt; 5; ++n)
    {
        printf("%2.2x ", *p);
        ++p;
    }

    printf("\t");

    p = str;
    for (int n = 0; n &lt; 5; ++n)
    {
        printf("%c", *p ? *p : ' ');
        ++p;
    }

    printf("\n", str);
}
</code></pre>

<p>结果输出：</p>

<pre><code>73 61 00 63 68  sa ch
73 61 00 00 00  sa
</code></pre>

<p>可见用strcpy拷贝时，ch被忽略了，但是memcpy也将它拷贝过来了。</p>

<p>详细讨论在<a href="http://stackoverflow.com/questions/2898364/strcpy-v-s-memcpy">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c语言字符串定义与初始化]]></title>
    <link href="http://calvinlee.github.io/blog/2012/08/05/two-ways-of-defining-strings-in-c/"/>
    <updated>2012-08-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/08/05/two-ways-of-defining-strings-in-c</id>
    <content type="html"><![CDATA[<h3>字符串的两种定义方式</h3>

<ol>
<li><p>char数组</p>

<p> char sa[] = &ldquo;hello world&rdquo;;</p></li>
<li><p>char指针</p>

<p> char *sp = &ldquo;hello world&rdquo;;</p></li>
</ol>


<p>这两种方式都产生了一个"hello world"的<strong>字符串常量</strong>,字符串常量存储在静态存储区中，静态存储区中的内容在程序运行的整个过程中都存在，而且只存储一份。</p>

<h3>数组与指针的关系</h3>

<p>在第一种定义中，字符串常量在编译时就已经分配好了空间，但直到运行时才会为数组分配存储空间，这时，存储在静态存储区中的字符串常量会被拷贝一份到数组中，此后，数组名sa与&amp;sa[0]等价。重要的是，sa是一个常量，你不能修改sa的值，你可以通过sa+1来标识数组里的下一个元素，也可以修改数组里的元素。然而，sa++是不允许的，因为自增运算符只能作用于变量而不是常量。</p>

<p>第二种定义中，程序运行时只为指针变量sp分配了存储空间，用来字符串常量"hello world"的地址，这时，字符串常量没有被拷贝。sp的值是可以改变的，如++sp将指向字符e。</p>

<p>总之，数组初始化是从静态存储区中把一个字符串拷贝给数组，而指针初始化只是复制这个字符串的地址。</p>

<h3>示例</h3>

<pre><code>#include &lt;stdio.h&gt;

int main(int args, char **argv) {
    char sa[] = "hello world";
    char *sp = "hello world";

    // sa++; 错误，sa是常量
    sp++;

    sa[1] = 'M';
    *(sa+2) = 'X';
    // sp[1] = 'M'; // 错误，不能修改常量值

    printf("%s\n", sa);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言函数指针与指针函数]]></title>
    <link href="http://calvinlee.github.io/blog/2012/08/05/c-function-pointer/"/>
    <updated>2012-08-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/08/05/c-function-pointer</id>
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;

int bar(int, char*);

// 指针函数
char *echo_hello(char *s) {
    char *result;
    int len = strlen(s) + strlen("hello ") + 1;
    result = (char *)malloc(len * sizeof(char));
    memset(result,0, len * sizeof(char));
    snprintf(result, len, "%s%s", "hello ", s);
    return result;
}

int main(int args, char **argv) {
    // 函数指针
    int  (*foo) (int, char *);

    foo = bar;
    foo = &amp;bar;

    foo(2, "hello world");
    (*foo)(2, "hello world");

    printf("%s\n", echo_hello("programmer!"));
}

int bar(int a, char *s) {
    printf("calling bar, int=%d, string=%s\n", a, s);
}
</code></pre>

<h3>Reference</h3>

<p><a href="http://blog.csdn.net/porscheyin/article/details/3461632/">http://blog.csdn.net/porscheyin/article/details/3461632/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[char类型是有符号的还是无符号的？]]></title>
    <link href="http://calvinlee.github.io/blog/2012/04/10/is-char-signed-or-unsigned/"/>
    <updated>2012-04-10T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/04/10/is-char-signed-or-unsigned</id>
    <content type="html"><![CDATA[<p><a href="http://ihacklog.com/programming/c/char-is-signed-or-unsigned-by-default.html">http://ihacklog.com/programming/c/char-is-signed-or-unsigned-by-default.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些有趣的C程序]]></title>
    <link href="http://calvinlee.github.io/blog/2012/04/05/interesting-c-code-snippets/"/>
    <updated>2012-04-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/04/05/interesting-c-code-snippets</id>
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;

int n[]={0x48,0x65,0x6C,0x6C, 
0x6F,0x2C,0x20, 
0x77,0x6F,0x72, 
0x6C,0x64,0x21, 
0x0A,0x00},\*m=n;

main(n){ 
    if(putchar (\*m)!='\0') main(m++);
}
</code></pre>

<p>输出<code>Hello, world!</code></p>
]]></content>
  </entry>
  
</feed>
