<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2013-11-07T18:14:56+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim tips]]></title>
    <link href="http://calvinlee.github.io/blog/2011/04/28/vim-tips/"/>
    <updated>2011-04-28T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2011/04/28/vim-tips</id>
    <content type="html"><![CDATA[<h2>移动</h2>

<p><code>0</code> 移动到行首<br/>
<code>$</code> 移动到行末<br/>
<code>CTRL+ o</code> 回到上一视图<br/>
<code>CTRL+ i</code> 前进到下一视图<br/>
<code>ZZ</code> 保存更改并退出</p>

<p><code>fx</code>  在当前行向前移动光标到下一个字符x (很明显, x可以是任意你想要移动到的字符). 这是一个超级有用的命令. 你可以输入;来重复前一个f命令.
<code>tx</code>  和上面的命令基本相同, 除了移动光标到字符x之前而不是x字符本身. (这个真的很有用)<br/>
<code>Fx</code>  在当前行向后移动光标到上一个字符x.</p>

<p><code>zz</code> 将当前行置于屏幕中间<br/>
<code>zt</code> 将当前行置于屏幕顶端<br/>
<code>zb</code> 将当前行置于屏幕底端<br/>
<code>CTRL+e</code> 移动光标所在行的位置，比如我光标在第10行，我想光标不动，但是所在行向上移<br/>
<code>CTRL+y</code> 同上，但是向下移<br/>
<code>%</code> match of next brace, bracket, comment</p>

<p>在长句子内移动  <br/>
在你编辑电子邮件或其他段落式文本的时候, 你可能注意到移动方向跳的行数比你料想的多. 这是因为你的段落对vim来说在很长的同一个行里. 用h, j, k, l移动前输入g可以让移动相对于屏幕看上去的行数而不是vim内部的行数.</p>

<h2>复制-粘贴</h2>

<p>1.选定文本块，使用v进入可视模式；移动光标键选定内容<br/>
1.复制选定块到缓冲区，用y；<br/>
复制整行，用yy;<br/>
复制到系统剪切板 &ldquo;+y<br/>
剪切到系统剪切板 &rdquo;+x<br/>
1.剪切选定块到缓冲区，用d；剪切整行用dd<br/>
1.粘贴缓冲区中的内容，用p</p>

<p>vim文件间复制粘贴  <br/>
<a href="http://www.cnblogs.com/jianyungsun/archive/2011/03/19/1988855.html">http://www.cnblogs.com/jianyungsun/archive/2011/03/19/1988855.html</a>  <br/>
使用 yaw  命令复制当前光标所在单词</p>

<p>用vi 复制第5行到第10行并粘贴到第12行之后？  <br/>
：5,10 co 12</p>

<h2>删除插入（s与c）</h2>

<p>s删除光标当前字符，进入插入模式，等同于 x i  <br/>
S删除当前行 进入插入模式，等同于 dd i  <br/>
c change 同样是替代插入，不过c要与其他指令配合使用  <br/>
如 cw 删除一个单词后i ，  <br/>
c$ =C = D i  删除光标位置到行末后i  <br/>
cc= S  <br/>
d$= D  <br/>
使用 yaw  命令复制当前光标所在单词</p>

<p>删除<br/>
向后删除一个词 dw 两个词 d2w<br/>
向后删除到行尾 d$<br/>
删除整行 dd<br/>
df c 向后删至字符c出现的位置(包括该字符)<br/>
dt c 向后删至字符c出现的位置(不包括该字符)<br/>
d /text 向后删至内容text出现的位置(不包括该text内容)</p>

<p>如果你在一个单词的中间而又想删掉这个单词，在你用 &ldquo;dw&rdquo; 前，你必须先移到这个单词  <br/>
的开始处。这里还有一个更简单的方法："daw"。  <br/>
&ldquo;daw&rdquo; 的 &ldquo;d&rdquo; 是删除操作符。"aw" 是一个文本对象。提示："aw" 表示 &ldquo;A Word&rdquo; (一个  <br/>
单词)，这样，"daw" 就是 &ldquo;Delete A Word&rdquo; (删除一个单词)。确切地说，该单词后的空  <br/>
格字符也被删除掉了。  <br/>
diw     删除光标上的单词 (不包括空白字符)  <br/>
daw     删除光标上的单词 (包括空白字符)</p>

<p>还有句子的 is 也是一个文本对象 对句子进行操作。  <br/>
另外还可以 ciw diw viw</p>

<p>如果光标位于"&ldquo;,[],()之间，还可以  <br/>
vi&rdquo;  <br/>
ci"  <br/>
参考 :help object-select</p>

<h2>编辑</h2>

<p>打开新文件 :e filename<br/>
i 在游標所在字元前開始輸入文字(insert)。<br/>
a 在游標所在字元後開始輸入文字(append)。<br/>
o 在游標所在行下開一新行來輸入文字(open)。<br/>
I 在行首開始輸入文字。此之行首指第一個非空白字元處，要從真正的第一個字<br/>
元處開始輸人文字，可使用 0i 或 gI(Vim 才有)。<br/>
A 在行尾開始輸入文字。這個好用，您不必管游標在此行的什麼地方，只要按 A<br/>
就會在行尾等著您輸入文字。<br/>
O 在游標所在行上開一新行來輸入文字。<br/>
J 將下一行整行接至本行(Joint)。<br/>
撤销 u<br/>
在一行上撤销 U<br/>
重做 CTRL r<br/>
替换字母 rx(x为要替换的字母)<br/>
改动单词直到单词末尾 ce<br/>
将光标移到某一个字母上，输入ce，然后敲入正确的单词<br/>
与此类推，还有cw，c$<br/>
Typing a capital  R  enters Replace mode until ESC is pressed.</p>

<p>. 重复前次的编辑动作<br/>
`. 回到上次编辑的位置</p>

<p>快速选中括号里的文本<br/>
vi{ 选中｛｝中间的内容,不包括｛｝<br/>
v<strong>a</strong>{ 选中｛｝中间内容，包括{}<br/>
vi( 选中（）中间内容<br/>
vi[ 选中[]中间内容<br/>
vit 选中<tag></tag>中间的内容，编辑XML文件时特别有用<br/>
vi" 选中"&ldquo;中间内容<br/>
vi' 选中'&lsquo;中间的内容</p>

<p>vis 选中一个句子<br/>
viw 选中一个单词<br/>
vip 选中一个段落<br/>
&hellip;</p>

<p>同时适用于c，y，d等motion。<br/>
参考:h text-objects</p>

<p>编辑二进制文件<br/>
打开文件：vim -b file<br/>
用vim -b datafile打开文件，用:%!xxd把二进制文件转换<br/>
编辑完后用:%!xxd -r命令把编辑状态的文本转换成二进制数据<br/>
具体描述可用:help 23.4察看帮助文档</p>

<p>切换最近编辑的两个buffer<br/>
CTRL-6 或 CTRL-^ 或 :e #</p>

<p>大小写转换：<br/>
gu或者gU或者~</p>

<p>行编辑<br/>
<code>:3,.d</code>            从3行删除到当前行<br/>
<code>:.,3d</code>            从当前行删除到3行<br/>
<code>:3,.+3d</code>          从3行删除到当前行后第三行<br/>
<code>:3,.-1d</code>          从3行删除到当前行前一行<br/>
<code>:.,3s/adb/def/g</code>  将当前行到第三行之间的abc替换为def<br/>
<code>:345w file</code>       将第 345 行写入 file 文件<br/>
<code>3,5w file</code>        将第 3 行至第 5 行写入 file 文件<br/>
<code>:r file</code>          读取 file 文件的内容，插入当前光标所在行的后面<br/>
<code>:e file</code>          编辑新文件 file 代替原有内容<br/>
<code>:f file</code>          将当前文件重命名为 file<br/>
<code>:f</code>               打印当前文件名称和状态，如文件的行数、光标所在的行号等</p>

<h2>命令补全</h2>

<p>When typing a  :  command, press CTRL-D to see possible completions.<br/>
Press TAB to use one completion.</p>

<p>使用关键字自动完成(补全)<br/>
vim 有个非常好的关键字自动完成系统. 就是说你可以只输入很长的词的一部分, 按一个键, vim帮你把这个词自动补全. 比如说在你的代码中有一个变量叫iAmALongAndAwkwardVarName, 你可能不愿意每次用这个变量都把整个词打一遍, 这时候就可以用自动完成功能.<br/>
要使用关键字自动完成, 只要输入一个字串的前几个字母 (比如 iAmAL) 然后按 <code>Ctrl-N</code>或者<code>Ctrl-P</code>. 如果vim没有选择你需要的字串, 继续按<code>Ctrl-N</code>或者<code>Ctrl-P</code> – vim会遍历所有和你输入的前几个字母匹配的字串.</p>

<h2>搜索替换</h2>

<ol>
<li><p> CTRL-G  displays your location in the file and the file status.<br/>
         G  moves to the end of the file.<br/>
 number  G  moves to that line number.<br/>
        gg  moves to the first line.</p></li>
<li><p> Typing  /  followed by a phrase searches FORWARD for the phrase.<br/>
 Typing  ?  followed by a phrase searches BACKWARD for the phrase.<br/>
 After a search type  n  to find the next occurrence in the same direction<br/>
 or  N  to search in the opposite direction.<br/>
 CTRL-O takes you back to older positions, CTRL-I to newer positions.</p></li>
<li><p> Typing  %  while the cursor is on a (,),[,],{, or } goes to its match.</p></li>
<li><p> To substitute new for the first old in a line type    :s/old/new  这个命令只替换当前行的内容<br/>
 To substitute new for all &lsquo;old&rsquo;s on a line type       :s/old/new/g<br/>
 To substitute phrases between two line #&rsquo;s type       :#,#s/old/new/g<br/>
 To substitute all occurrences in the file type        :%s/old/new/g<br/>
 To ask for confirmation each time add 'c&rsquo;             :%s/old/new/gc</p></li>
</ol>


<p>注：<br/>
%代表当前编辑的内容<br/>
#代表前一个编辑的内容<br/>
如:<br/>
:%!xxd 表示将当前所有内容用xxd命令处理</p>

<p>搜索精确匹配<br/>
如xxx是要查找的内容，输入<br/>
<code>/\&lt;xxx\&gt;</code>，<br/>
要在<code>&lt;&gt;</code> 前加\进行转义，告诉Vim <code>&lt;&gt;</code> 这个不是要查找的内容。<br/>
<code>\&lt;</code> 表示只匹配单词的开头，<code>\&gt;</code>表示只匹配单词末尾，点<code>.</code>表示匹配任何字符。<br/>
*搜索游标所在出的单词（精确匹配）<br/>
#反向搜索游标所在出的单词（精确匹配）</p>

<p>快速替换游标处的单词  <br/>
把光标置于thisisaverylongword之上, 然后</p>

<pre><code>:%s/&lt;CTRL+R&gt;&lt;CTRL+W&gt;/ABCD/g .  
</code></pre>

<p>在命令格式下, CTRL+R代表插入寄存器, CTRL+W代表当前单词.<br/>
也可以通过寄存器的方式来使用.<br/>
使用v选择一个区域, 然后 &ldquo;ay  , 存取寄存器a，然后</p>

<pre><code>:%s/&lt;CTRL+R&gt;a/ABCD/g  
</code></pre>

<p>ABCD 可以用同样的方法,使用寄存器.</p>

<p>重复修改：<br/>
&ldquo;.&rdquo; 是 Vim 中一个非常简单而有用的命令。它重复最后一次的修改操作。</p>

<pre><code>    /four&lt;Enter&gt;    找到第一个 "four"  
    cwfive&lt;Esc&gt;     修改成 "five"  
    n               找下一个 "four"  
    .               重复修改操作  
    n               找下一个 "four"  
    .               重复修改  
                    如此类推......  
</code></pre>

<p>搜索完毕后取消高亮<br/>
:noh 或者 :nohlsearch</p>

<h2>窗口和标签</h2>

<p><code>CTRL+w w</code> 切换窗口<br/>
<code>:tabedit file</code> 在新tab中打开文件<br/>
<code>:tab split</code>  将当前窗口缓冲区内容在新tab中打开<br/>
<code>:tabonly</code> 关闭其他所有标签<br/>
<code>:tabc</code> 关闭当前标签页<br/>
<code>:tabc 3</code> 关闭第三个标签页<br/>
<code>gt</code> 切换tab显示<br/>
<code>2gt</code> 显示第二个tab</p>

<p>更改窗口宽度和高度<br/>
<code>Crtl+w &gt;</code> 将当前窗口向右边扩展一行，将 <code>&gt;</code> 换成 <code>&lt;</code> 就是向左边扩展一行。也可以在之前使用数字代表扩展的行数<br/>
<code>5 Ctrl+w &gt;</code> ,向右边扩展5行。<br/>
<code>Ctrl+w +</code> 更改窗口高度。+ 增加高度，- 减小高度。</p>

<p><code>:close</code> 关闭窗口<br/>
实际上，任何退出编辑的命令都可以关闭窗口，象 &ldquo;:quit&rdquo; 和 &ldquo;ZZ&rdquo; 等。但 &ldquo;close"可以避免你在剩下一个窗口的时候不小心退出 Vim 了。</p>

<p><code>:only</code> 关闭所有其它窗口<br/>
如果你已经打开了一整套窗口，但现在只想编辑其中一个，可以使用这个命令。<br/>
这个命令关闭除当前窗口外的所有窗口。如果要关闭的窗口中有一个没有存盘，Vim 会<br/>
显示一个错误信息，并且那个窗口不会被关闭。</p>

<h2>注释python代码</h2>

<p>1.Ctrl + V 进入 VIM 的块操作模式<br/>
1.使用 j, k 键上下移动，选中这三行，需要确保每行的首列包含在选中块中。<br/>
1.键入 r ，即在替换行首字符。 输入 Python 的注释符 ‘＃’。<br/>
1.按下 ESC 键。</p>

<h2>删除重复行</h2>

<p><code>:sort u</code>
参见<code>:help sort</code></p>

<h2>格式化文本</h2>

<p>参见:h formatoptions, :h textwidth
gq 对行内长文本进行换行
gq{ 对一个段落进行自动换行</p>

<h2>其他</h2>

<p>K 显示游标所在的单词相关的man page<br/>
：r!command 在游标处插入command的执行输出结果，如date命令将插入当前时间</p>

<p>对齐文本<br/>
以某一个分隔符为界在垂直方向上对齐文本，如：</p>

<pre><code>name|age|sex  
Alice|23|female  
BobBobBobBob|25|male  
</code></pre>

<p>对齐后：</p>

<pre><code>name         | age | sex  
Alice        | 23  | female  
BobBobBobBob | 25  | male  
</code></pre>

<p>这个功能在写代码时对齐变量十分有用，通过Align和Tabular两个插件可以轻松完成。<br/>
<code>:%Align |</code>  将全文对齐 <br/>
<code>:'&lt;,'&gt;Align = + - = |</code>  将选中的文本按+，-，=或者|对齐 <br/>
更多选项参考<code>:help align</code></p>

<p>另外，通过外部命令column也可以实现：<br/>
<code>:%!column -t -s '|'</code></p>

<p>VIM中按w时光标移动总要停顿一会儿才会响应<br/>
原因是我map了一个以w开头的按键，导致每次按w后，vim都要等待一下判断是执行w还是继续接收输入。去掉这个map就好了。</p>

<p>在线的colorscheme配色网站<br/>
<a href="http://bytefluent.com/vivify/">http://bytefluent.com/vivify/</a></p>

<h2>一些plugin：</h2>

<ul>
<li><a href="http://www.mirecle.com/2009/07/29/vim-python-indentation-and-inspection.html">http://www.mirecle.com/2009/07/29/vim-python-indentation-and-inspection.html</a></li>
<li><a href="http://www.vimer.cn/2011/02/%E8%AE%A9vimgvim%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%94%AF%E6%8C%81python%E8%AF%AD%E6%B3%95%E7%BC%A9%E8%BF%9B%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90.html">http://www.vimer.cn/2011/02/%E8%AE%A9vimgvim%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%94%AF%E6%8C%81python%E8%AF%AD%E6%B3%95%E7%BC%A9%E8%BF%9B%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
