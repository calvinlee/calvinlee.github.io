<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2013-11-14T10:14:43+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pmap介绍]]></title>
    <link href="http://calvinlee.github.io/blog/2013/11/11/introducing-pmap/"/>
    <updated>2013-11-11T18:36:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2013/11/11/introducing-pmap</id>
    <content type="html"><![CDATA[<p>pmap用来打印进程地址空间占用。通常也可以通过如下命令来查看：</p>

<pre><code>cat /proc/self/maps 
</code></pre>

<p>但用pmap包含更多的信息，显示结果也更直观:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>$ pmap -d 4827
</span><span class='line'>4827:   bash
</span><span class='line'>Address           Kbytes Mode  Offset           Device    Mapping
</span><span class='line'>0000000000400000     896 r-x-- 0000000000000000 008:00005 bash
</span><span class='line'>00000000006e0000       4 r---- 00000000000e0000 008:00005 bash
</span><span class='line'>00000000006e1000      36 rw--- 00000000000e1000 008:00005 bash
</span><span class='line'>00000000006ea000      24 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>0000000001a8d000    5388 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>00007f1c6c5cd000      48 r-x-- 0000000000000000 008:00005 libnss_files-2.15.so
</span><span class='line'>00007f1c6c5d9000    2044 ----- 000000000000c000 008:00005 libnss_files-2.15.so
</span><span class='line'>00007f1c6c7d8000       4 r---- 000000000000b000 008:00005 libnss_files-2.15.so
</span><span class='line'>00007f1c6c7d9000       4 rw--- 000000000000c000 008:00005 libnss_files-2.15.so
</span><span class='line'>00007f1c6c7da000      40 r-x-- 0000000000000000 008:00005 libnss_nis-2.15.so
</span><span class='line'>00007f1c6c7e4000    2048 ----- 000000000000a000 008:00005 libnss_nis-2.15.so
</span><span class='line'>00007f1c6c9e4000       4 r---- 000000000000a000 008:00005 libnss_nis-2.15.so
</span><span class='line'>00007f1c6c9e5000       4 rw--- 000000000000b000 008:00005 libnss_nis-2.15.so
</span><span class='line'>00007f1c6c9e6000      92 r-x-- 0000000000000000 008:00005 libnsl-2.15.so
</span><span class='line'>00007f1c6c9fd000    2044 ----- 0000000000017000 008:00005 libnsl-2.15.so
</span><span class='line'>00007f1c6cbfc000       4 r---- 0000000000016000 008:00005 libnsl-2.15.so
</span><span class='line'>00007f1c6cbfd000       4 rw--- 0000000000017000 008:00005 libnsl-2.15.so
</span><span class='line'>00007f1c6cbfe000       8 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>00007f1c6cc00000      32 r-x-- 0000000000000000 008:00005 libnss_compat-2.15.so
</span><span class='line'>00007f1c6cc08000    2044 ----- 0000000000008000 008:00005 libnss_compat-2.15.so
</span><span class='line'>00007f1c6ce07000       4 r---- 0000000000007000 008:00005 libnss_compat-2.15.so
</span><span class='line'>00007f1c6ce08000       4 rw--- 0000000000008000 008:00005 libnss_compat-2.15.so
</span><span class='line'>00007f1c6ce09000    7052 r---- 0000000000000000 008:00005 locale-archive
</span><span class='line'>00007f1c6d4ec000    1748 r-x-- 0000000000000000 008:00005 libc-2.15.so
</span><span class='line'>00007f1c6d6a1000    2048 ----- 00000000001b5000 008:00005 libc-2.15.so
</span><span class='line'>00007f1c6d8a1000      16 r---- 00000000001b5000 008:00005 libc-2.15.so
</span><span class='line'>00007f1c6d8a5000       8 rw--- 00000000001b9000 008:00005 libc-2.15.so
</span><span class='line'>00007f1c6d8a7000      20 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>00007f1c6d8ac000       8 r-x-- 0000000000000000 008:00005 libdl-2.15.so
</span><span class='line'>00007f1c6d8ae000    2048 ----- 0000000000002000 008:00005 libdl-2.15.so
</span><span class='line'>00007f1c6daae000       4 r---- 0000000000002000 008:00005 libdl-2.15.so
</span><span class='line'>00007f1c6daaf000       4 rw--- 0000000000003000 008:00005 libdl-2.15.so
</span><span class='line'>00007f1c6dab0000     136 r-x-- 0000000000000000 008:00005 libtinfo.so.5.9
</span><span class='line'>00007f1c6dad2000    2048 ----- 0000000000022000 008:00005 libtinfo.so.5.9
</span><span class='line'>00007f1c6dcd2000      16 r---- 0000000000022000 008:00005 libtinfo.so.5.9
</span><span class='line'>00007f1c6dcd6000       4 rw--- 0000000000026000 008:00005 libtinfo.so.5.9
</span><span class='line'>00007f1c6dcd7000     136 r-x-- 0000000000000000 008:00005 ld-2.15.so
</span><span class='line'>00007f1c6ded7000      12 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>00007f1c6def0000      28 r--s- 0000000000000000 008:00005 gconv-modules.cache
</span><span class='line'>00007f1c6def7000       8 rw--- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>00007f1c6def9000       4 r---- 0000000000022000 008:00005 ld-2.15.so
</span><span class='line'>00007f1c6defa000       8 rw--- 0000000000023000 008:00005 ld-2.15.so
</span><span class='line'>00007fffe147d000     132 rw--- 0000000000000000 000:00000   [ stack ]
</span><span class='line'>00007fffe15ff000       4 r-x-- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>ffffffffff600000       4 r-x-- 0000000000000000 000:00000   [ anon ]
</span><span class='line'>mapped: 30276K    writeable/private: 5668K    shared: 28K
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看出，这个进程的虚拟地址空间大小微30276k，实际占用的物理内存微5668k。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bind mount的使用]]></title>
    <link href="http://calvinlee.github.io/blog/2013/11/07/awesome-bind-mount/"/>
    <updated>2013-11-07T18:10:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2013/11/07/awesome-bind-mount</id>
    <content type="html"><![CDATA[<p>如果你需要暂时修改一个配置文件用来测试，但是这个配置文件是read only的，你不想大费周折，怎么办？这时bind mount就可以派上用场。</p>

<p>mount命令的常规用法是将一个<em>块设备</em>上的文件系统挂载一个指定的路径。而bind选项可以将一个目录挂载到一个指定的路径。</p>

<p>假设我们需要临时修改一下config文件，但是当前用户没有权限修改这个文件：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls /tmp/etc/
</span><span class='line'>total 0
</span><span class='line'>-rw-r&mdash;&mdash;&ndash; 1 root root 0 Nov 12 10:38 config
</span><span class='line'>$ sudo cat /tmp/etc/config
</span><span class='line'>sky=0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在我们将/tmp/bind_dir挂载到/tmp/etc：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>$ sudo mount --bind /tmp/bind_dir /tmp/etc
</span><span class='line'>$ ls /tmp/bind_dir/
</span><span class='line'>total 0
</span><span class='line'>$ ls /tmp/etc/
</span><span class='line'>total 0
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
现在/tmp/bind_dir被挂载到了/tmp/etc，也就是说访问/tmp/etc实际上是访问的是/etc/bind_dir目录。现在我们可以往/tmp/etc目录写入我们想要的修改：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>$ touch /tmp/etc/config
</span><span class='line'>$ echo "tmp=1" &gt;&gt; /tmp/etc/config
</span><span class='line'>$ cat /tmp/etc/config
</span><span class='line'>tmp=1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在就达到了修改/tmp/etc/config的目的，可以执行测试。测试完毕后，执行umount：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo umount /tmp/etc/</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>/tmp/etc目录下的内容没有变化：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo umount /tmp/etc/
</span><span class='line'>$ ls /tmp/etc/
</span><span class='line'>total 4.0K
</span><span class='line'>-rw-r&mdash;&mdash;&ndash; 1 root root 6 Nov 12 10:41 config
</span><span class='line'>$ sudo cat /tmp/etc/config
</span><span class='line'>sky=0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>mount的过程实际上是inode被替换的过程，这里我们将/tmp/bind_dir挂载到/tmp/etc上，实际上的实现过程是将/tmp/etc的dentry目录项所指向的inode重定向到/tmp/bind_dir的inode索引节点，也就是说让/tmp/bind_dir和/tmp/etc指向同一个inode节点：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -lid /tmp/bind_dir/ /tmp/etc/
</span><span class='line'>1094756 drwxrwxr-x 2 calvin calvin 4.0K Nov 12 10:47 /tmp/bind_dir/
</span><span class='line'>1094756 drwxrwxr-x 2 calvin calvin 4.0K Nov 12 10:47 /tmp/etc/</span></code></pre></td></tr></table></div></figure></notextile></div>
可见两个路径都指向了1094756的inode索引节点。</p>

<p>另外几个应用bind mount的例子：<br/>
* <a href="http://docs.1h.com/Bind_mounts">http://docs.1h.com/Bind_mounts</a><br/>
* <a href="http://backdrift.org/how-to-use-bind-mounts-in-linux">http://backdrift.org/how-to-use-bind-mounts-in-linux</a></p>

<h1>Reference</h1>

<p><a href="http://alanwu.blog.51cto.com/3652632/1105681">ext3 mount过程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禁用内核进程地址随机]]></title>
    <link href="http://calvinlee.github.io/blog/2013/11/04/disable-kernel-random-address/"/>
    <updated>2013-11-04T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2013/11/04/disable-kernel-random-address</id>
    <content type="html"><![CDATA[<p>今天接触了Linux下的VDSO（Virtual Dynamically-linked Shared Object)，用来使系统调用更加快速和高效，但在查看进程vdso.so在进程地址空间的分布时，发现每次打印出来的进程地址都不一样：</p>

<pre><code>$ ldd /bin/ls
    linux-vdso.so.1 =&gt;  (0x00007ffff7ffe000)
    libselinux.so.1 =&gt; /lib/x86\_64-linux-gnu/libselinux.so.1 (0x00007ffff7dc0000)
    librt.so.1 =&gt; /lib/x86\_64-linux-gnu/librt.so.1 (0x00007ffff7bb8000)
    libacl.so.1 =&gt; /lib/x86\_64-linux-gnu/libacl.so.1 (0x00007ffff79af000)
    libc.so.6 =&gt; /lib/x86\_64-linux-gnu/libc.so.6 (0x00007ffff75ef000)
    libdl.so.2 =&gt; /lib/x86\_64-linux-gnu/libdl.so.2 (0x00007ffff73eb000)
    /lib64/ld-linux-x86-64.so.2 (0x0000555555554000)
    libpthread.so.0 =&gt; /lib/x86\_64-linux-gnu/libpthread.so.0 (0x00007ffff71cd000)
    libattr.so.1 =&gt; /lib/x86\_64-linux-gnu/libattr.so.1 (0x00007ffff6fc8000)
$ cat /proc/self/maps 
00400000-0040b000 r-xp 00000000 08:05 1438995                            /bin/cat
0060a000-0060b000 r--p 0000a000 08:05 1438995                            /bin/cat
0060b000-0060c000 rw-p 0000b000 08:05 1438995                            /bin/cat
0060c000-0062d000 rw-p 00000000 00:00 0                                  [heap]
7ffff7337000-7ffff7a1a000 r--p 00000000 08:05 137790                     /usr/lib/locale/locale-archive
7ffff7a1a000-7ffff7bcf000 r-xp 00000000 08:05 407680                     /lib/x86\_64-linux-gnu/libc-2.15.so
7ffff7bcf000-7ffff7dcf000 ---p 001b5000 08:05 407680                     /lib/x86\_64-linux-gnu/libc-2.15.so
7ffff7dcf000-7ffff7dd3000 r--p 001b5000 08:05 407680                     /lib/x86\_64-linux-gnu/libc-2.15.so
7ffff7dd3000-7ffff7dd5000 rw-p 001b9000 08:05 407680                     /lib/x86\_64-linux-gnu/libc-2.15.so
7ffff7dd5000-7ffff7dda000 rw-p 00000000 00:00 0 
7ffff7dda000-7ffff7dfc000 r-xp 00000000 08:05 407692                     /lib/x86\_64-linux-gnu/ld-2.15.so
7ffff7fd9000-7ffff7fdc000 rw-p 00000000 00:00 0 
7ffff7ff9000-7ffff7ffb000 rw-p 00000000 00:00 0 
7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00022000 08:05 407692                     /lib/x86\_64-linux-gnu/ld-2.15.so
7ffff7ffd000-7ffff7fff000 rw-p 00023000 08:05 407692                     /lib/x86\_64-linux-gnu/ld-2.15.so
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
</code></pre>

<p>原来在现代Linux内核中，为了安全起见，会对每个进程的进程地址进行随机化。用以下命令即可禁用这个功能：</p>

<pre><code>echo "0" &gt; /proc/sys/kernel/randomize_va_space
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用lvm管理磁盘分区]]></title>
    <link href="http://calvinlee.github.io/blog/2012/07/05/use-lvm-to-extends-disk-capacity/"/>
    <updated>2012-07-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/07/05/use-lvm-to-extends-disk-capacity</id>
    <content type="html"><![CDATA[<p>最近在给新同学安装Ubuntu系统后发现有的同学home分区空间不够了，于是研究了下利用lvm对home空间进行扩容。<br/>
lvm的概念介绍来自<a href="http://hi.baidu.com/sinyo/blog/item/d793be3e866682f9828b13c6.html">这里</a>.</p>

<p>LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组（volume group），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配，例如按照使用用途进行定义：“development”和“sales”，而不是使用物理磁盘名“sda”和“sdb”。而且当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。</p>

<hr />

<h3>lvm的基本组成</h3>

<p>lvm包括以下几个概念：</p>

<ul>
<li>Physical volume (PV)<br/>
指代磁盘上的物理分区</li>
<li>Volume group (VG)<br/>
VG类似与物理硬盘，由多个物理分区组成，可以在VG上创建一个或者多个逻辑卷（LV）</li>
<li>Logical volume (LV)<br/>
在VG的基础上划分出来的逻辑分区，在这个分区上可以建立文件系统，如home</li>
<li>Physical extent (PE)<br/>
每个逻辑卷被划分的最小可寻址单元，一般为4MB。</li>
</ul>


<p>接下来记录一下对home分区进行扩容的过程。</p>

<h3>准备工作</h3>

<p>已有的环境：<br/>
/dev/sda5 是一块windows分区，格式为fat32;<br/>
/dev/sda9 为当前home所在的分区，格式为ext4.<br/>
现在需要把/dev/sda5合并到home分区中。在建立lvm分区之前，需要备份这两块分区中的数据，因为之后的操作会对这两块分区进行格式化。</p>

<p>首先备份两块分区的数据，重启机器进入recovery模式，以root用户登录，卸载home所在的/dev/sda9</p>

<pre><code># umount /home
</code></pre>

<h3>安装lvm</h3>

<pre><code># apt-get install lvm2
</code></pre>

<h3>修改物理分区类型为8e</h3>

<p>作为PV的物理分区类型必须为8e，表示这是一块lvm的物理分区。我们使用fdisk对/dev/sda5和/dev/sda9这两个物理分区的分区类型进行修改。</p>

<pre><code># fdisk /dev/sda

WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
         switch off the mode (command 'c') and change display units to
         sectors (command 'u').

Command (m for help): t
Partition number (1-10): 5
Hex code (type L to list codes): 8e
Changed system type of partition 5 to 8e (Linux LVM)
Command (m for help): t
Partition number (1-10): 9
Hex code (type L to list codes): 8e
Changed system type of partition 9 to 8e (Linux LVM)
Command (m for help): w       //将修改写入磁盘
</code></pre>

<p>最后<code>fdisk -l</code>查看一下修改后的分区。</p>

<h3>创建物理卷</h3>

<pre><code># pvcreate /dev/sda5
pvcreate -- physical volume "/dev/sda5" successfully created
# pvcreate /dev/sda9
pvcreate -- physical volume "/dev/sda9" successfully created
# pvdisplay
</code></pre>

<h3>创建卷组</h3>

<pre><code># vgcreate lvm_sda /dev/sda5 // 以/dev/sda5为基础创建一个名为lvm_sda的卷组
# vgextend lvm_sda /dev/sda9 // 将/dev/sda9添加进lvm_sda卷组
# vgdisplay lvm_sda
</code></pre>

<h3>创建逻辑卷</h3>

<pre><code># lvcreate -L 150G lvm_sda -n lvolhome
</code></pre>

<p>这里在lvm_sda上创建了一个150G的名为lvolhome的逻辑卷,这时会生成/dev/lvm_sda/lvolhome设备节点。</p>

<h3>创建文件系统</h3>

<pre><code># mkfs.ext4 /dev/lvm_sda/lvolhome
</code></pre>

<p>然后将其挂载到/home，并创建对应用户的home目录。</p>

<pre><code># mount /dev/lvm_sda/lvolhome /home
# cd /home
# mkdir calvin
# chown -R calvin:calvin calvin/
</code></pre>

<h3>设置开机挂载逻辑卷</h3>

<pre><code># vi /etc/fstab
</code></pre>

<p>删除已有的home挂载信息，添加：</p>

<pre><code>/dev/lvm_sda/lvolhome /home ext4 defaults 0 2
</code></pre>

<p>重启系统，done。</p>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/jianghuyue/article/details/6001957">http://blog.csdn.net/jianghuyue/article/details/6001957</a></li>
<li><a href="http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch27_:_Expanding_Disk_Capacity">http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch27_:_Expanding_Disk_Capacity</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用iconv和convmv转换文本编码]]></title>
    <link href="http://calvinlee.github.io/blog/2012/05/31/convmv-and-iconv/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/05/31/convmv-and-iconv</id>
    <content type="html"><![CDATA[<h3>文本内容编码转换</h3>

<p>文本显示乱码是因为文件本身的编码格式和编辑器打开文本所使用的编码格式不一致，使用iconv命令可以转换文本编码。如：</p>

<pre><code>$ iconv -f coding1 -t coding2 file1 -o file2
-f:指定文件原始编码
-t:指定转换的目标编码
file1:代转换的文件
-o:指定输出文件
</code></pre>

<h3>文件名编码转换</h3>

<p>常常有这样的情况，将一个rar文件解压后中文的文件名显示乱码，显示”invalid encoding“，利用convmv命令可以进行转换：</p>

<pre><code>$ convmv -f gbk -t utf-8 -r --notest path/to/your/file
-f:指定原始编码
-t:指定转换的目标编码
-r:如果目标文件是一个目录，递归处理目录下的文件
--notest:转换后将文件重命名，默认情况下这个命令不会重命名文件
</code></pre>
]]></content>
  </entry>
  
</feed>
