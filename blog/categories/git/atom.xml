<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2013-11-07T18:14:56+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git tips and tricks]]></title>
    <link href="http://calvinlee.github.io/blog/2012/10/18/git-tricks/"/>
    <updated>2012-10-18T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/10/18/git-tricks</id>
    <content type="html"><![CDATA[<h3>在提交历史中查找指定文本</h3>

<pre><code>git log -G'password' --all
</code></pre>

<p>or</p>

<pre><code>git rev-list --all | (
while read revision; do
    git grep -F 'password' $revision
done
)
</code></pre>

<p>or</p>

<pre><code>for revision in `git rev-list --all`; 
do
    git grep -F 'password' $revision;
done
</code></pre>

<p>or
<code>git log -S'bad\_code' path/to/file</code> 查看指定代码片段在哪个版本出现过。
<code>git blame path/to/file</code>: 查看指定文件的每一行的最后修改时间是在哪个版本，但不能查看删除的行或者被替换的行
参见man git-blame.</p>

<h3>git commit</h3>

<p><code>git commit -c &lt;commit&gt;</code>  reedit commit message of <commit>
<code>git commit -C &lt;commit&gt;</code>  reuse commit message of <commit></p>

<h3>git底层命令</h3>

<p>git ls-tree<br/>
git write-tree<br/>
git ls-files<br/>
git cat-file<br/>
git rev-parse</p>

<p>.git/refs 保存所有引用的命名空间
.git/refs/heads 所有的本地分支</p>

<p>git commit &mdash;allow-empty &mdash;amend</p>

<p>[TODO] strace命令</p>

<p>.git/index 包含文件索引的目录树，记录了文件名和文件的状态信息，文件的内容存储在.git/objects中，文件索引建立了文件和对象库中的文件对象之间的对应关系。</p>

<p>git checkout . / git checkout &mdash; <file><br/>
丢弃workspace中的内容，保留暂存区的内容</p>

<p>git checkout HEAD . / git checkout HEAD <file><br/>
用HEAD指向的commit中的内容替代workspace和暂存区的内容，这将导致当前workspace和暂存区的内容被丢弃。</p>

<h3>使用git reflog挽回错误的reset</h3>

<p>git reflog<br/>
git reflog show master</p>

<p>分支的变更记录都会被记录在.git/logs/refs下，通过 git reflog命令可以获得分支的历史变更记录，然后可以通过git reset 命令将HEAD任意重置到任意一个提交。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tips]]></title>
    <link href="http://calvinlee.github.io/blog/2012/03/26/git-tips/"/>
    <updated>2012-03-26T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/03/26/git-tips</id>
    <content type="html"><![CDATA[<h3>配置</h3>

<ul>
<li><p>git alias</p>

<p>  git config &mdash;global alias.co checkout<br/>
  git config &mdash;global alias.br branch<br/>
  git config &mdash;global alias.ci commit<br/>
  git config &mdash;global alias.st status<br/>
  &hellip; &hellip;</p></li>
</ul>


<h3>查看历史</h3>

<ul>
<li><p>git log</p>

<p>-N                 只显示最近N次提交<br/>
-p                 按补丁格式显示每个更新之间的差异。<br/>
&mdash;stat             显示每次更新的文件修改统计信息。<br/>
&mdash;shortstat        只显示&mdash;stat中最后的行数修改添加移除统计。<br/>
&mdash;name-only        仅在提交信息后显示已修改的文件清单。<br/>
&mdash;name-status      显示新增、修改、删除的文件清单。<br/>
&mdash;relative-date    使用较短的相对时间显示（比如，“2 weeks ago”）。<br/>
&mdash;graph            显示 ASCII 图形表示的分支合并历史。<br/>
&mdash;pretty           使用其他格式显示历史提交信息。可用的选项包括oneline，short，full，fuller和format（后跟指定格式）。<br/>
&mdash;since,&mdash;after    仅显示指定时间之后的提交。<br/>
&mdash;until,&mdash;before   仅显示指定时间之前的提交。<br/>
&mdash;author           仅显示指定作者相关的提交。<br/>
&mdash;committer        仅显示指定提交者相关的提交。</p>

<p><code>git log --stat</code><br/>
查看每次提交修改的代码行数</p>

<p><code>git log --name-status  --author=bob --pretty=format:</code> // 注意format为空
统计bob改动的文件列表，可以将结果保存为文本文件，用vim打开，使用<code>:sort u</code>删去重复的行</p>

<p><code>git instaweb</code> 以web的方式查看仓库<br/>
<code>git instaweb --stop</code> 停止服务器</p></li>
</ul>


<h3>撤销回滚</h3>

<ul>
<li><p>git reset</p>

<ol>
<li> git reset &mdash;soft 只撤销 commit,保留 working tree 和 index file。</li>
<li> git reset &mdash;hard 撤销 commit、index file 和 working tree,即彻底销毁最近一次的 commit</li>
<li> git reset &mdash;mixed 撤销 commit 和 index file,保留 working tree</li>
<li> git reset 和 git reset &mdash;mixed 完全一样</li>
<li> git reset &mdash;用于删除登记在 index file 里的某个文件。</li>
</ol>


<p>  git reset的第二种用法: <br/>
  <code>git reset [-q] [&lt;commit&gt;] [--] &lt;paths&gt;...</code>
  将指定路径的文件在commit的内容拷贝到暂存区。git reset path和git add path效果相反。</p></li>
<li><p>回退版本(参考<a href="http://hi.baidu.com/talltwintowers/blog/item/36c931bf7685360119d81fc6.html">这里</a>)</p>

<p>回退版本很简单，<code>git checkout sha1</code> 即可。<br/>
现在你不在任何一个branch（no branch），执行git status显示：</p>

<pre><code>  $ git status
  # Not currently on any branch.
  nothing to commit (working directory clean)
</code></pre>

<p>  这个操作会将HEAD指向指定commit,并重置index和working tree到此commit的状态. 但由于此commit不是任何branch的头(&ldquo;head&rdquo; or &ldquo;tip&rdquo;),所以git会给出警告.这种情况称为"HEAD is detached".参考<a href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#detached-head">这里</a><br/>
  虽然警告,但并没有什么危险,只要别做commit,最后checkout回(某个branch)来就行了.<br/>
  如果此时做commit呢?&mdash;那也没有什么,只是这个新的commit以后只能通过SHA1来引用了(当然,还可以用git reflog看到),好比一个野指针;或者你赋个tag给它.不过这没有意义,如果你真的想从这儿发展下去,那么应该新建一个branch,比如<code>git checkout -b &lt;new_branch&gt; &lt;start_point&gt;</code><br/>
  但是注意,做此操作时working tree和index应该是"干净的",就是和HEAD(所指的commit)完全一致,没有任何改动,否则git会报错不执行;你可能会看到类似这样的error:</p>

<pre><code>  error: You have local changes to 'somefile'; cannot switch branches.或
  error: Entry 'somefile' would be overwritten by merge. Cannot merge.
</code></pre>

<p>  (不过,你可以用&mdash;merge选项强制执行,此时git会做一个three-way merge)</p>

<p>  要切换回HEAD commit,执行<code>git checkout branch-name</code></p></li>
</ul>


<h3>Diff &amp; Patch</h3>

<ul>
<li><p>git diff</p>

<pre><code>git diff 查看 working tree 与 index file 的差别。  
git diff --cached/--staged 查看 index file 与最后一次提交的commit之间的差别的。  
git diff HEAD 是查看 working tree 和最后一次提交的commit之间的差别的。  
</code></pre></li>
<li><pre><code>git format-patch -1    生成最后一个提交对应的patch文件
git am &lt; diff.patch    把一个patch文件应用到当前分支
</code></pre></li>
</ul>


<h3>Branch</h3>

<ul>
<li>所谓Branch，本质上是一个指针（一串SHA号），指向某个commit。特别的，HEAD是当前分支的最后一个commit的别名。</li>
<li><p>git merge
  多个分支进行merge时可能存在两种方式：</p>

<ol>
<li> Fast-forward</li>
<li> 两个分支（A，B）的末端和这两个分支的共同祖先（C）进行三方合并（可能出现冲突），合并后将产生一个新的commit，这个commit有两个祖先（A和B）。</li>
</ol>


<p>  <code>git branch --merged</code> 查看有哪些分支已经合并进当前分支了，这些分支可以删掉了，因为这些分支的更改已经包含再当前分支里面了<br/>
  <code>git branch --no-merged</code> 查看尚未合并的分支</p></li>
<li><p>git rebase
                   A&mdash;-B&mdash;-C topic
                  /
             D&mdash;-E&mdash;-F&mdash;-G master
当前分支为topic，<code>git rebase master</code>，rebase的过程是：</p>

<ol>
<li>把从topic和master共同的祖先E开始在当前分支上的提交生成一个patch文件</li>
<li>将A、B、C砍掉，相当与执行<code>git reset --hard master</code></li>
<li>将生成的patch文件一个一个应用到G上</li>
</ol>


<p>结果变成这样：
                           A'&mdash;B'&mdash;C' topic
                          /
             D&mdash;-E&mdash;-F&mdash;-G master
topic的提交历史被改写了，成了master分支的直接下游，这时在master分支上做一次fast-forward的merge就好了。</p>

<p>可见，相比于merge，rebase不会产生一个新的commit，合并后的主线更加干净。如果希望在执行git pull时自动使用git rebase取代默认的git merge操作，可以执行</p>

<pre><code>git pull --rebase
</code></pre>

<p>参见<a href="http://www.worldhello.net/gotgithub/04-work-with-others/020-shared-repo.html#rebase-and-push">这里</a></p></li>
<li><p>git pull</p>

<p>  git pull = git fetch + git merge<br/>
  git pull origin next = git fetch origin/next + git merge origin/next  // 将远程分支next合并到当前分支上</p>

<p><code>git pull</code>会把所有正在跟踪远端仓库的分支的本地分支进行数据拉取。
执行git pull, git merge, git reset之前的HEAD会被保存到ORIG_HEAD,所以如果要回滚刚才的pull动作，那么执行<code>git reset --hard ORIG_HEAD</code>。查看pull下来的内容，执行<code>git diff ORIG_HEAD</code></p></li>
<li><p>git push</p>

<p><code>git push origin featureA</code> 将本地的featureA分支推送到远程仓库<br/>
<code>git push origin local_branch:remote_branch</code> 将本地的local_branch的内容推送到origin远程仓库的remote_branch分支上去，所以执行 <code>git push origin :remote_branch</code> 将删除远程版本库的 remote_branch 分支。</p></li>
<li><p>git fetch</p>

<pre><code>$ git remote add rc git@github.com:calvinlee/git-sandbox.git
$ git remote -v
origin    git@github.com:calvinlee/git-sandbox.git (fetch)
origin    git@github.com:calvinlee/git-sandbox.git (push)
rc    git@github.com:calvinlee/git-sandbox.git (fetch)
rc    git@github.com:calvinlee/git-sandbox.git (push)
$ git fetch rc
 * [new branch]      experimental -&gt; rc/experimental
 * [new branch]      master     -&gt; rc/master
</code></pre>

<p>运行git fetch后，本地多了从rc这个库fetch下来的分支：</p>

<pre><code>$ git branch -r
origin/HEAD -&gt; origin/master
origin/experimental
origin/master
rc/experimental
rc/master
</code></pre>

<p>现在可以切换到这个分支查看，或者选择merge到本地分支。（远程分支以这样的形式命名：远程仓库名/分支名）</p></li>
</ul>


<h3>git reset与git checkout</h3>

<p><code>git reset</code>用来修改refs的指向:修改的是.git/refs/heads/master的值，HEAD本身一直指向refs/heads/master, 并没有在reset过程中改变。
<code>git checkout</code>用来修改HEAD的指向: 修改的是.git/HEAD的文件内容, checkout不影响.git/refs/heads/下文件的内容。</p>

<p>什么叫detached HEAD？<br/>
这个状态下.git/HEAD指向了一个具体的commit ID，而不是一个分支的名称。</p>

<h3>符号</h3>

<ul>
<li><p>branchA..branchB</p>

<p>用来获取在branchB上但是不在branchA上的提交。如：<br/>
<code>git log --pretty=format:"%h %s" HEAD~3..HEAD</code> 显示最近三次提交的log<br/>
<code>git log origin/master..HEAD</code> 显示所有在当前分支上但不在远程分支上的提交。如果当前分支正在track远程分支，那么下次运行<code>git push</code>将推送这些提交到远程分支上。</p>

<p>这种表示法与下列语法等价：</p>

<pre><code> ^branchA branchB
 branchB --not branchA
</code></pre></li>
<li><p>branchA&hellip;branchB</p>

<p>获取被两个分支之一包含但不被这两个分支同时包含的提交。</p></li>
<li><p>^[N] 和 ~[N]</p>

<p>两个分支合并后，你合并时所在分支称为first parent，你所合并的分支称为second parent<br/>
HEAD^[N]表示HEAD的第N个second parent<br/>
HEAD~[N]表示HEAD的第N个first parent</p></li>
<li><p>获取某一次特定提交对应的文件内容
e43fef:path/to/file<br/>
获取暂存区中的文件对象：<br/>
:path/to/file</p></li>
</ul>


<h3>其它</h3>

<ul>
<li><p>将多个commit合成一个commit后提交</p>

<p>场景：<br/>
packages/apps/Email 已经提交了多个commit在branchA上，现在要把这些commit压成一个commit合并到merge_fix分支上。</p>

<pre><code> $ cd packages/apps/Email
 $ repo sync .
 $ git log --pretty=oneline // 假如需要squash commit1 和 commit2
   e8949d30bcb568b32a12338a28fb9d7a13e8b086 commit1
   6d7eef22cd2634bd0da8de8e38635dd92b3e5a48 commit2
   0130c5a03756b01ec4a39422ab08474625153a81 commit3
 $ git rebase -i 0130c5a03756b01ec4a39422ab08474625153a81 //注意这里是想要squash的commit的前一个commit(commit3), 更改commit message后继续
 $ git log -2 //找到squash后的commit，假如squash后的commit号为bed1b4fa7ae3f9a4a546f2aa367a8f2e7ba4b7b1
 $ git checkout merge_fix
 $ git cherry-pick bed1b4fa7ae3f9a4a546f2aa367a8f2e7ba4b7b1
</code></pre>

<p>  完毕</p></li>
<li><p>一个图片文件 index.jpeg 冲突了，如何取出他人的版本?</p>

<pre><code>git show :3:./index.jpeg &gt; index.jpeg-theirs
</code></pre>

<p>可以先使用git ls-files查看：</p>

<pre><code>$ git ls-files -s
100644 a97de6ee1b2352f4e33d09196fa478ffaae0b024 0 README
100644 04c14c2023f69123e719fae7c4242537c943b726 0 file1
100644 2f08be9a02925b5c016904e19fbd5e8d057ae756 0 hello.c
100644 eb651d4b863843d3ad12c446b541075f2839d7d2 2 index.jpeg
100644 099df17855c924472b1809d99389d8eee7582d9f 3 index.jpeg
</code></pre>

<p>第三栏称为stage number，stage number为2的存储着合并前的版本，stage number为3的存储着合并过来的版本。参见<a href="http://book.git-scm.com/7_the_git_index.html">这里</a></p></li>
<li><p>漂亮的git前端工具 &ndash; <a href="http://jonas.nitro.dk/tig/">tig</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更改git提交历史信息]]></title>
    <link href="http://calvinlee.github.io/blog/2012/03/22/git-change-author-and-email-of-commits/"/>
    <updated>2012-03-22T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/03/22/git-change-author-and-email-of-commits</id>
    <content type="html"><![CDATA[<p>如果你使用git进行版本控制，不知道你有没有遇到这种情况，提交了几个commit后发现你本地git库的author和email信息配置不是你预想的，这时你想要更新已经提交的commit的author和email信息，怎么办？<br/>
这是stackoverflow上给出的<a href="http://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git">做法</a>：</p>

<pre><code>#!/bin/sh

git filter-branch --env-filter '

an="$GIT_AUTHOR_NAME"
am="$GIT_AUTHOR_EMAIL"
cn="$GIT_COMMITTER_NAME"
cm="$GIT_COMMITTER_EMAIL"

if [ "$GIT_COMMITTER_EMAIL" = "your@email.to.match" ]
then
    cn="Your New Committer Name"
    cm="Your New Committer Email"
fi
if [ "$GIT_AUTHOR_EMAIL" = "your@email.to.match" ]
then
    an="Your New Author Name"
    am="Your New Author Email"
fi

export GIT_AUTHOR_NAME="$an"
export GIT_AUTHOR_EMAIL="$am"
export GIT_COMMITTER_NAME="$cn"
export GIT_COMMITTER_EMAIL="$cm"
'
</code></pre>

<p>原文在<a href="http://help.github.com/change-author-info/">这里</a>。</p>

<p>但是问题是，更新本地的提交历史信息后，想要把更新push到远程分支上去，出现non-fast-forward错误，意思是要推送的提交并非继远程版本库最新提交之后的提交，推送会造成覆盖远程仓库的提交。</p>

<pre><code>$ git push origin master
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'example.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>使用&mdash;force选项进行强制push即可： <code>git push --force origin master</code>，但是这样会覆盖远程分支上的commit:</p>

<pre><code>-f, --force
    Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the
    check. This can cause the remote repository to lose commits; use it with care.
</code></pre>

<h3>另一种方法</h3>

<p>使用<code>git rebase -i</code> 到你想更改的commit的前一个commit，选择reword选项，然后依次重新提交，这时提交的author和email将会是你本地配置的author和email，rebase完成后commit的author和email信息就更新了。</p>
]]></content>
  </entry>
  
</feed>
