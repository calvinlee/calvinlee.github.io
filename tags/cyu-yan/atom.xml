<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C语言 | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/tags/cyu-yan/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2013-11-12T11:27:03+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[strcpy和memcpy的区别]]></title>
    <link href="http://calvinlee.github.io/blog/2013/02/25/strcpy-memcpy/"/>
    <updated>2013-02-25T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2013/02/25/strcpy-memcpy</id>
    <content type="html"><![CDATA[<p>今天被问到strcpy和memcpy的区别，一时语塞，于是研究一下记录下来。</p>

<h3>strcpy</h3>

<pre><code>   #include &lt;string.h&gt;
   char *strcpy(char *dest, const char *src);
</code></pre>

<p>它的作用是将src指向的字符串，包括最后的'\0'，拷贝到dest指向的字符串。它的一个简单实现如下：</p>

<pre><code>       char*
       strncpy(char *dest, const char *src, size_t n){
           size_t i;

           for (i = 0 ; i &lt; n &amp;&amp; src[i] != '\0' ; i++)
               dest[i] = src[i];
           for ( ; i &lt; n ; i++)
               dest[i] = '\0';

           return dest;
       }
</code></pre>

<p>也就是说，strcpy会从头开始依次拷贝每个字符，但是一旦遇到了空字符NULL（'\0'），strcpy就会停止拷贝。</p>

<h3>memcpy</h3>

<pre><code>   #include &lt;string.h&gt;
   void *memcpy(void *dest, const void *src, size_t n);
</code></pre>

<p>memcpy用来进行内存拷贝，它将src指向的地址后的n个字节拷贝到dest开始的内存里，可以用它拷贝任何内型的数据对象。</p>

<hr />

<p>以下是stackoverflow上的一个demo，它清楚的显示了这两个函数的区别：</p>

<pre><code>void dump5(char *str);

int main()
{
    char s[5]={'s','a','\0','c','h'};

    char membuff[5]; 
    char strbuff[5];
    memset(membuff, 0, 5); // init both buffers to nulls
    memset(strbuff, 0, 5);

    strcpy(strbuff,s);
    memcpy(membuff,s,5);

    dump5(membuff); // show what happened
    dump5(strbuff);

    return 0;
}

void dump5(char *str)
{
    char *p = str;
    for (int n = 0; n &lt; 5; ++n)
    {
        printf("%2.2x ", *p);
        ++p;
    }

    printf("\t");

    p = str;
    for (int n = 0; n &lt; 5; ++n)
    {
        printf("%c", *p ? *p : ' ');
        ++p;
    }

    printf("\n", str);
}
</code></pre>

<p>结果输出：</p>

<pre><code>73 61 00 63 68  sa ch
73 61 00 00 00  sa
</code></pre>

<p>可见用strcpy拷贝时，ch被忽略了，但是memcpy也将它拷贝过来了。</p>

<p>详细讨论在<a href="http://stackoverflow.com/questions/2898364/strcpy-v-s-memcpy">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c语言字符串定义与初始化]]></title>
    <link href="http://calvinlee.github.io/blog/2012/08/05/two-ways-of-defining-strings-in-c/"/>
    <updated>2012-08-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/08/05/two-ways-of-defining-strings-in-c</id>
    <content type="html"><![CDATA[<h3>字符串的两种定义方式</h3>

<ol>
<li><p>char数组</p>

<p> char sa[] = &ldquo;hello world&rdquo;;</p></li>
<li><p>char指针</p>

<p> char *sp = &ldquo;hello world&rdquo;;</p></li>
</ol>


<p>这两种方式都产生了一个"hello world"的<strong>字符串常量</strong>,字符串常量存储在静态存储区中，静态存储区中的内容在程序运行的整个过程中都存在，而且只存储一份。</p>

<h3>数组与指针的关系</h3>

<p>在第一种定义中，字符串常量在编译时就已经分配好了空间，但直到运行时才会为数组分配存储空间，这时，存储在静态存储区中的字符串常量会被拷贝一份到数组中，此后，数组名sa与&amp;sa[0]等价。重要的是，sa是一个常量，你不能修改sa的值，你可以通过sa+1来标识数组里的下一个元素，也可以修改数组里的元素。然而，sa++是不允许的，因为自增运算符只能作用于变量而不是常量。</p>

<p>第二种定义中，程序运行时只为指针变量sp分配了存储空间，用来字符串常量"hello world"的地址，这时，字符串常量没有被拷贝。sp的值是可以改变的，如++sp将指向字符e。</p>

<p>总之，数组初始化是从静态存储区中把一个字符串拷贝给数组，而指针初始化只是复制这个字符串的地址。</p>

<h3>示例</h3>

<pre><code>#include &lt;stdio.h&gt;

int main(int args, char **argv) {
    char sa[] = "hello world";
    char *sp = "hello world";

    // sa++; 错误，sa是常量
    sp++;

    sa[1] = 'M';
    *(sa+2) = 'X';
    // sp[1] = 'M'; // 错误，不能修改常量值

    printf("%s\n", sa);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言函数指针与指针函数]]></title>
    <link href="http://calvinlee.github.io/blog/2012/08/05/c-function-pointer/"/>
    <updated>2012-08-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/08/05/c-function-pointer</id>
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;

int bar(int, char*);

// 指针函数
char *echo_hello(char *s) {
    char *result;
    int len = strlen(s) + strlen("hello ") + 1;
    result = (char *)malloc(len * sizeof(char));
    memset(result,0, len * sizeof(char));
    snprintf(result, len, "%s%s", "hello ", s);
    return result;
}

int main(int args, char **argv) {
    // 函数指针
    int  (*foo) (int, char *);

    foo = bar;
    foo = &amp;bar;

    foo(2, "hello world");
    (*foo)(2, "hello world");

    printf("%s\n", echo_hello("programmer!"));
}

int bar(int a, char *s) {
    printf("calling bar, int=%d, string=%s\n", a, s);
}
</code></pre>

<h3>Reference</h3>

<p><a href="http://blog.csdn.net/porscheyin/article/details/3461632/">http://blog.csdn.net/porscheyin/article/details/3461632/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些有趣的C程序]]></title>
    <link href="http://calvinlee.github.io/blog/2012/04/05/interesting-c-code-snippets/"/>
    <updated>2012-04-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/04/05/interesting-c-code-snippets</id>
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;

int n[]={0x48,0x65,0x6C,0x6C, 
0x6F,0x2C,0x20, 
0x77,0x6F,0x72, 
0x6C,0x64,0x21, 
0x0A,0x00},\*m=n;

main(n){ 
    if(putchar (\*m)!='\0') main(m++);
}
</code></pre>

<p>输出<code>Hello, world!</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C程序设计语言读书笔记]]></title>
    <link href="http://calvinlee.github.io/blog/2012/03/24/notes-on-the-c-programming-language/"/>
    <updated>2012-03-24T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/03/24/notes-on-the-c-programming-language</id>
    <content type="html"><![CDATA[<h3>函数与程序结构</h3>

<p>为什么要使用函数?</p>

<ul>
<li>隐藏实现细节</li>
<li>对同一段逻辑，尽可能实现代码复用</li>
</ul>


<p>函数之间的通信可以通过传递参数，函数返回值和外部变量进行。<br/>
关于函数返回值：<br/>
默认函数返回值为int类型
如果返回值为一个表达式，那么表达式的值在返回之前将被转换为函数的类型，这个操作可能会丢失信息，所以某些编译器会给出警告信息。</p>

<p>函数声明<br/>
如果函数声明中不包含参数，如</p>

<pre><code>double atof();
</code></pre>

<p>那么编译器为了兼容老版本的C语言策划你工序，将不会对atof的参数做任何假设，并且会关闭所有的参数检查。所以，如果函数带有参数，则要声明它们；如果没有参数，则使用<strong>void</strong>进行声明。</p>

<p>变量类型</p>

<ul>
<li><p>外部变量</p>

<p>  C语言可以看成是一系列的外部对象构成，这些外部对象包括函数和变量。外部变量可以在全局范围内访问，与内部变量相比，它有更大的作用域和生命周期。任何函数都可以访问一个外部变量，但前提是，<strong>这个变量需要通过某种方式声明</strong>。</p></li>
<li><p>自动变量</p>

<p>  在函数内部声明的变量，包括函数参数称为自动变量，它们在函数每次调用时初始化，函数调用完成后自动销毁。</p></li>
<li><p>静态变量</p>

<p> 用static声明外部变量和函数，可以将其声明的对象的作用域限定为被编译原文件的剩余部分，通过static声明外部对象，可以达到隐藏外部对象的目的。被static声明的函数的函数名除了对该函数声明的所在的文件可见外，其他文件无法访问。</p>

<p> static也可用于声明内部变量，它同自动变量一样是局部变量，与自动变量不同的是，不管其所在的函数是否被调用，它一直存在，一直占据存储空间。</p></li>
<li><p>寄存器变量
  register声明告诉编译器，它所声明的变量在程序中使用的频率较高，暗示将这个变量放在寄存器中，从而执行速度更快，但是，编译器可以选择忽略这个声明。</p>

<p>  register声明只适用于自动变量以及函数的形式参数。</p></li>
</ul>


<p>作用域<br/>
外部变量和函数的作用域从声明它的地方开始，到其所在的文件末尾结束。</p>

<p>变量的声明与定义<br/>
&mdash;> 变量的声明只是说明变量的属性和性质，并不分配存储单元;<br/>
&mdash;> 变量的定义表示要分配存储单元。<br/>
变量的声明有两种：</p>

<ol>
<li><p>定义声明（defining declaration）</p>

<p> 在声明一个变量的时候就为这个变量分配存储空间，这构成了对这个变量的定义。</p></li>
<li><p>引用声明（referencing declaration)</p>

<p> 不会分配存储空间，只是告诉编译器要使用这个变量。<br/>
 变量只能定义一次，但是可以被声明多次。举例如下：</p>

<pre><code> int tern = 1; // 定义声明，声明tern的同时定义tern，导致内存空间的分配
 main() {
  extern int tern; // 引用声明，不会分配内存空间
  int tern = 2; // 错误，重复定义

  extern int var;
 }

 int var = 5;
</code></pre>

<p> 关键字extern表明这是一个引用声明，只做引用，不做定义。extern主要用在：</p>

<ol>
<li>每个需要访问外部变量的函数中，都必须用extern关键字声明相应的外部变量（如上例的tern）;</li>
<li>要在外部变量的定义之前使用该变量(如上例的var变量);</li>
<li>外部变量的定义在一个文件中，而在其他文件中需要通过extern声明来访问它。</li>
</ol>
</li>
</ol>


<p>函数的声明与定义<br/>
函数的声明（函数原型）与定义是分开的。函数在使用前必须要先声明，如果没有函数原型，那么在函数第一次使用的时候会被隐式声明：该函数的返回值被假定为int型，而对函数参数不做任何假设。</p>

<p>初始化<br/>
外部变量和静态变量默认初始化为0，自动变量和寄存器变量的初值没有定义。<br/>
外部变量和静态变量的初始化表达式必须是常量表达式，且只初始化一次。自动变量和寄存器变量的初始化表达式可以不是常量表达式，且在每次进入函数或者程序块时都要被初始化一次。</p>

<p>Reference：</p>

<ul>
<li><a href="http://www.cppblog.com/mymsdn/archive/2008/08/19/59377.aspx">http://www.cppblog.com/mymsdn/archive/2008/08/19/59377.aspx</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
