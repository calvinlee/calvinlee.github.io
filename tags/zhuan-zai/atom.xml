<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 转载 | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/tags/zhuan-zai/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2014-02-23T15:23:50+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rotating Async Tasks]]></title>
    <link href="http://calvinlee.github.io/blog/2012/03/22/rotating-async-tasks/"/>
    <updated>2012-03-22T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/03/22/rotating-async-tasks</id>
    <content type="html"><![CDATA[<p><strong>Originally posted by <a href="http://evancharlton.com/thoughts/rotating-async-tasks">Even Charlton</a>.</strong></p>

<p>A common problem for new Android developers is how to handle screen rotations on the Android platform. Screen rotations cause all sorts of problems if you don&rsquo;t anticipate them because the Activity gets torn down completely and then rebuilt. If you don&rsquo;t handle it properly, AsyncTasks (threads) break completely. I&rsquo;ll show the code first and then talk about why it works. Here&rsquo;s the general pattern.</p>

<h3>The code</h3>

<pre><code>public class MyActivity extends Activity {
    private MyTask mTask;
    @Override
    public void onCreate(Bundle savedInstanceState)
        super.onCreate(savedInstanceState)
        mTask = (MyTask) getLastNonConfigurationInstance();
        if(mTask == null) {
            mTask = new MyTask();
        }
        mTask.activity = this;
        if(mTask.getStatus() == AsyncTask.Status.PENDING) {
            mTask.execute();
        }
    }
    @Override
    public Object onRetainNonConfigurationInstance() {
        return mTask;
    }
    private static class MyTask extends AsyncTask&lt;Params, Progress, Result&gt;() {
        public MyActivity activity;
        @Override
        protected void onPreExecute() {
            // ...
        }
        @Override
        protected Result doInBackground(Params... params) {
            // ...
        }
        @Override
        protected void onProgressUpdate(Progress... updates) {
            // ...
        }
        @Override
        protected void onPostExecute(Result result) {
            // ...
        }
    }
}
</code></pre>

<h3>The explanation</h3>

<p>This works because MyTask is a static class&mdash;it will survive the class being torn down. All you then do is reattach it to the Activity when you recreate the Activity after the rotation. Note that you don&rsquo;t just always call mTask.execute() &mdash; only call it if it hasn&rsquo;t been called before.</p>

<p>Of course this might not be perfect for your situation, but I assume that you can make the necessary modifications for your specific case. Feel free to drop me a line if you have any questions.</p>

<h3>注</h3>

<p>从Api level 11开始引入了<a href="http://developer.android.com/guide/topics/fundamentals/loaders.html">Loader</a>类，该类同AsyncTask一样可以实现异步加载，同时在设计上考虑了configuation改变的场景。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP/1.1 Cache-Control的理解]]></title>
    <link href="http://calvinlee.github.io/blog/2010/09/09/understanding-on-http-11-cache-control/"/>
    <updated>2010-09-09T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2010/09/09/understanding-on-http-11-cache-control</id>
    <content type="html"><![CDATA[<p>网页的缓存是由HTTP消息头中的“Cache-control”来控制的，常见的取值有
* private
* no-cache
* max-age
* must-revalidate</p>

<p>等，默认为private。其作用根据不同的重新浏览方式分为以下几种情况：</p>

<p>（1） 打开新窗口<br/>
如果指定cache-control的值为private、no-cache、must-revalidate，那么打开新窗口访问时都会重新访问服务器。而如果指定了max-age值，那么在此值内的时间里就不会重新访问服务器，例如：</p>

<pre><code>Cache-control: max-age=5
</code></pre>

<p>表示当访问此网页后的5秒内再次访问不会向服务器发起请求</p>

<p>（2） 在地址栏输入地址回车<br/>
如果值为private或must-revalidate，则只有第一次访问时会访问服务器，以后就不再访问。如果值为no-cache，那么每次都会访问。如果值为max-age，则在过期之前不会重复访问。</p>

<p>（3） 按后退按扭<br/>
如果值为private、must-revalidate、max-age，则不会重访问，而如果为no-cache，则每次都重复访问</p>

<p>（4） 按刷新按扭<br/>
无论为何值，都会重复访问</p>

<p>cache-control字段取值含义：
<a href="/images/http_cache_control.jpg"><img src="/images/http_cache_control.jpg" alt="/images/http_cache_control.jpg" /></a></p>

<p>Reference:<br/>
<a href="http://www.blogjava.net/dashi99/archive/2008/12/30/249207.html">http://www.blogjava.net/dashi99/archive/2008/12/30/249207.html</a></p>
]]></content>
  </entry>
  
</feed>
