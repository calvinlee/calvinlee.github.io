<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: http | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/tags/http/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2014-02-21T21:53:33+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[multipart/form-data与application/x-www-form-urlencoded]]></title>
    <link href="http://calvinlee.github.io/blog/2012/06/06/multipart-formdata-and-application-x-www-form-urlencoded/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/06/06/multipart-formdata-and-application-x-www-form-urlencoded</id>
    <content type="html"><![CDATA[<p>在浏览器上提交表单时，根据提交的方式，get或者post，表单数据被封装进url或者http头中，这是http请求的Content-Type字段值默认为<code>application/x-www-form-urlencoded</code>。</p>

<pre><code>POST /upload HTTP/1.1
Host: localhost:8080
Origin: http://localhost:8080
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-us) AppleWebKit/531.2+ (KHTML, like Gecko) Version/5.0 Safari/531.2+
Accept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Referer: http://localhost:8080/
Content-Type: application/x-www-form-urlencoded
Accept-Encoding: gzip
Cookie: JSESSIONID=18DE3AD950262E1EDA9A453A8C3BF430
Content-Length: 14

username=scott

HTTP/1.1 
200 OK
Server: Apache-Coyote/1.1
Content-Length: 0
Date: Wed, 06 Jun 2012 06:31:20 GMT
</code></pre>

<p>这种情况下在服务器端使用<code>request.getParameter("username")</code>就可以取出scott这个值。</p>

<p>当需要通过表单上传文件时，这时enctype必须为<code>multipart/form-data</code>或者<code>multipart/mixed</code>。比如：</p>

<pre><code>&lt;form method="post" action="upload"
    enctype="multipart/form-data"&gt;
        &lt;input type="file" name="upload_file"/&gt;
        &lt;input type="text" name="username"/&gt;
        &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</code></pre>

<p>这时浏览器会以表单为单位将所有提交数据进行分割，并分隔符boundary分隔:</p>

<pre><code>POST /upload HTTP/1.1
Host: localhost:8080
Origin: http://localhost:8080
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-us) AppleWebKit/531.2+ (KHTML, like Gecko) Version/5.0 Safari/531.2+
Content-Type: multipart/form-data; boundary=----WebKitFormBoundarysJagkbbAojjjPOh8
Accept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Referer: http://localhost:8080/
Accept-Encoding: gzip
Cookie: JSESSIONID=18DE3AD950262E1EDA9A453A8C3BF430
Content-Length: 33076

------WebKitFormBoundarysJagkbbAojjjPOh8
Content-Disposition: form-data; name="upload_file"; filename="mmssms.db-shm"
Content-Type: application/octet-stream
.....
.....
------WebKitFormBoundarysJagkbbAojjjPOh8
Content-Disposition: form-data; name="username"

scott
------WebKitFormBoundarysJagkbbAojjjPOh8--
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Length: 343
Date: Wed, 06 Jun 2012 06:47:49 GMT
</code></pre>

<p>这时在server端就不能用request.getParameter这种方式获取表单数据了，必须对request的数据进行解码。这部分工作已经有现成的库帮我们做了，比如<a href="http://commons.apache.org/fileupload/">Apache Common Fileupload</a>。</p>

<h3>Reference</h3>

<p><a href="http://zh.wikipedia.org/wiki/MIME">http://zh.wikipedia.org/wiki/MIME</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP/1.1 Cache-Control的理解]]></title>
    <link href="http://calvinlee.github.io/blog/2010/09/09/understanding-on-http-11-cache-control/"/>
    <updated>2010-09-09T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2010/09/09/understanding-on-http-11-cache-control</id>
    <content type="html"><![CDATA[<p>网页的缓存是由HTTP消息头中的“Cache-control”来控制的，常见的取值有
* private
* no-cache
* max-age
* must-revalidate</p>

<p>等，默认为private。其作用根据不同的重新浏览方式分为以下几种情况：</p>

<p>（1） 打开新窗口<br/>
如果指定cache-control的值为private、no-cache、must-revalidate，那么打开新窗口访问时都会重新访问服务器。而如果指定了max-age值，那么在此值内的时间里就不会重新访问服务器，例如：</p>

<pre><code>Cache-control: max-age=5
</code></pre>

<p>表示当访问此网页后的5秒内再次访问不会向服务器发起请求</p>

<p>（2） 在地址栏输入地址回车<br/>
如果值为private或must-revalidate，则只有第一次访问时会访问服务器，以后就不再访问。如果值为no-cache，那么每次都会访问。如果值为max-age，则在过期之前不会重复访问。</p>

<p>（3） 按后退按扭<br/>
如果值为private、must-revalidate、max-age，则不会重访问，而如果为no-cache，则每次都重复访问</p>

<p>（4） 按刷新按扭<br/>
无论为何值，都会重复访问</p>

<p>cache-control字段取值含义：
<a href="/images/http_cache_control.jpg"><img src="/images/http_cache_control.jpg" alt="/images/http_cache_control.jpg" /></a></p>

<p>Reference:<br/>
<a href="http://www.blogjava.net/dashi99/archive/2008/12/30/249207.html">http://www.blogjava.net/dashi99/archive/2008/12/30/249207.html</a></p>
]]></content>
  </entry>
  
</feed>
