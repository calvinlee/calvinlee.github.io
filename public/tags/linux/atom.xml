<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: linux | 且听风吟]]></title>
  <link href="http://calvinlee.github.io/tags/linux/atom.xml" rel="self"/>
  <link href="http://calvinlee.github.io/"/>
  <updated>2014-02-21T21:53:33+08:00</updated>
  <id>http://calvinlee.github.io/</id>
  <author>
    <name><![CDATA[Calvin Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用lvm管理磁盘分区]]></title>
    <link href="http://calvinlee.github.io/blog/2012/07/05/use-lvm-to-extends-disk-capacity/"/>
    <updated>2012-07-05T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/07/05/use-lvm-to-extends-disk-capacity</id>
    <content type="html"><![CDATA[<p>最近在给新同学安装Ubuntu系统后发现有的同学home分区空间不够了，于是研究了下利用lvm对home空间进行扩容。<br/>
lvm的概念介绍来自<a href="http://hi.baidu.com/sinyo/blog/item/d793be3e866682f9828b13c6.html">这里</a>.</p>

<p>LVM是逻辑盘卷管理（Logical Volume Manager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组（volume group），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配，例如按照使用用途进行定义：“development”和“sales”，而不是使用物理磁盘名“sda”和“sdb”。而且当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。</p>

<hr />

<h3>lvm的基本组成</h3>

<p>lvm包括以下几个概念：</p>

<ul>
<li>Physical volume (PV)<br/>
指代磁盘上的物理分区</li>
<li>Volume group (VG)<br/>
VG类似与物理硬盘，由多个物理分区组成，可以在VG上创建一个或者多个逻辑卷（LV）</li>
<li>Logical volume (LV)<br/>
在VG的基础上划分出来的逻辑分区，在这个分区上可以建立文件系统，如home</li>
<li>Physical extent (PE)<br/>
每个逻辑卷被划分的最小可寻址单元，一般为4MB。</li>
</ul>


<p>接下来记录一下对home分区进行扩容的过程。</p>

<h3>准备工作</h3>

<p>已有的环境：<br/>
/dev/sda5 是一块windows分区，格式为fat32;<br/>
/dev/sda9 为当前home所在的分区，格式为ext4.<br/>
现在需要把/dev/sda5合并到home分区中。在建立lvm分区之前，需要备份这两块分区中的数据，因为之后的操作会对这两块分区进行格式化。</p>

<p>首先备份两块分区的数据，重启机器进入recovery模式，以root用户登录，卸载home所在的/dev/sda9</p>

<pre><code># umount /home
</code></pre>

<h3>安装lvm</h3>

<pre><code># apt-get install lvm2
</code></pre>

<h3>修改物理分区类型为8e</h3>

<p>作为PV的物理分区类型必须为8e，表示这是一块lvm的物理分区。我们使用fdisk对/dev/sda5和/dev/sda9这两个物理分区的分区类型进行修改。</p>

<pre><code># fdisk /dev/sda

WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
         switch off the mode (command 'c') and change display units to
         sectors (command 'u').

Command (m for help): t
Partition number (1-10): 5
Hex code (type L to list codes): 8e
Changed system type of partition 5 to 8e (Linux LVM)
Command (m for help): t
Partition number (1-10): 9
Hex code (type L to list codes): 8e
Changed system type of partition 9 to 8e (Linux LVM)
Command (m for help): w       //将修改写入磁盘
</code></pre>

<p>最后<code>fdisk -l</code>查看一下修改后的分区。</p>

<h3>创建物理卷</h3>

<pre><code># pvcreate /dev/sda5
pvcreate -- physical volume "/dev/sda5" successfully created
# pvcreate /dev/sda9
pvcreate -- physical volume "/dev/sda9" successfully created
# pvdisplay
</code></pre>

<h3>创建卷组</h3>

<pre><code># vgcreate lvm_sda /dev/sda5 // 以/dev/sda5为基础创建一个名为lvm_sda的卷组
# vgextend lvm_sda /dev/sda9 // 将/dev/sda9添加进lvm_sda卷组
# vgdisplay lvm_sda
</code></pre>

<h3>创建逻辑卷</h3>

<pre><code># lvcreate -L 150G lvm_sda -n lvolhome
</code></pre>

<p>这里在lvm_sda上创建了一个150G的名为lvolhome的逻辑卷,这时会生成/dev/lvm_sda/lvolhome设备节点。</p>

<h3>创建文件系统</h3>

<pre><code># mkfs.ext4 /dev/lvm_sda/lvolhome
</code></pre>

<p>然后将其挂载到/home，并创建对应用户的home目录。</p>

<pre><code># mount /dev/lvm_sda/lvolhome /home
# cd /home
# mkdir calvin
# chown -R calvin:calvin calvin/
</code></pre>

<h3>设置开机挂载逻辑卷</h3>

<pre><code># vi /etc/fstab
</code></pre>

<p>删除已有的home挂载信息，添加：</p>

<pre><code>/dev/lvm_sda/lvolhome /home ext4 defaults 0 2
</code></pre>

<p>重启系统，done。</p>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/jianghuyue/article/details/6001957">http://blog.csdn.net/jianghuyue/article/details/6001957</a></li>
<li><a href="http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch27_:_Expanding_Disk_Capacity">http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch27_:_Expanding_Disk_Capacity</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[改善SD卡读取速度]]></title>
    <link href="http://calvinlee.github.io/blog/2012/05/31/improve-sd-card-read-speed/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/05/31/improve-sd-card-read-speed</id>
    <content type="html"><![CDATA[<p>一年前刷了CM的rom，发现sd卡速度下降了很多，今天看见有人发了一个kernel的patch改善这个问题，原理是修改sys文件系统下的一个read_ahead_kb参数值，这个值指定了每次从SD卡上读取数据时预读的大小。</p>

<pre><code>adb shell 'echo 128 &gt; /sys/devices/virtual/bdi/179:0/read_ahead_kb'
</code></pre>

<p>但这个值也不是越大越好，128是个比较平衡的值，因为在读取小文件的情况下，如果这个值太大，那么预读的数据很大几率是无用的数据，反而降低性能，<a href="http://forum.xda-developers.com/showthread.php?t=1032317">这个</a>帖子有详细的分析。</p>

<p>这个值的定义在/include/linux/mm.h中：</p>

<pre><code>/* readahead.c */
#define VM_MAX_READAHEAD    128 /* kbytes */
#define VM_MIN_READAHEAD    16  /* kbytes (includes current page) */
</code></pre>

<h3>设置开机生效</h3>

<p>注意：重启后这个设置就失效了，为了避免每次开机后都要设置，可以在init.rc脚本中加上：</p>

<pre><code>write /sys/devices/virtual/bdi/179:0/read_ahead_kb 128
</code></pre>

<p>或者利用init.d脚本的支持，在/system/etc/init.d目录下创建一个文件10sdcard:</p>

<pre><code>#!/system/bin/sh
echo 128 &gt; /sys/devices/virtual/bdi/179:0/read_ahead_kb

这样每次开机后都会执行这段脚本。
</code></pre>

<h3>CM支持init.d开机脚本的方法</h3>

<ol>
<li><p>在init.rc的class_start default上加上</p>

<pre><code># Run sysinit
exec /system/bin/sysinit

class_start default
</code></pre></li>
<li><p>建立文件/system/bin/sysinit</p>

<pre><code>#!/system/bin/sh

export PATH=/sbin:/system/sbin:/system/bin:/system/xbin
/system/bin/logwrapper /system/xbin/run-parts /system/etc/init.d
</code></pre></li>
</ol>


<p>然后将启动脚本放在/system/etc/init.d目录下，这些脚本以数字命名，run-parts命令按照顺序排序依次执行这些脚本(cron命令也是利用run-parts命令执行指定目录下的脚本的，参见/etc/crontab)。</p>

<p>其实也可以这样做：<br/>
在init.rc的class_start default上加入</p>

<pre><code>start sysinit
</code></pre>

<p>然后在所有service定义的后面加上：</p>

<pre><code>service sysinit /system/bin/logwrapper /system/xbin/busybox run-parts /system/etc/init.d
    disabled
    oneshot
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="http://forum.xda-developers.com/showthread.php?t=815557">http://forum.xda-developers.com/showthread.php?t=815557</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用iconv和convmv转换文本编码]]></title>
    <link href="http://calvinlee.github.io/blog/2012/05/31/convmv-and-iconv/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/05/31/convmv-and-iconv</id>
    <content type="html"><![CDATA[<h3>文本内容编码转换</h3>

<p>文本显示乱码是因为文件本身的编码格式和编辑器打开文本所使用的编码格式不一致，使用iconv命令可以转换文本编码。如：</p>

<pre><code>$ iconv -f coding1 -t coding2 file1 -o file2
-f:指定文件原始编码
-t:指定转换的目标编码
file1:代转换的文件
-o:指定输出文件
</code></pre>

<h3>文件名编码转换</h3>

<p>常常有这样的情况，将一个rar文件解压后中文的文件名显示乱码，显示”invalid encoding“，利用convmv命令可以进行转换：</p>

<pre><code>$ convmv -f gbk -t utf-8 -r --notest path/to/your/file
-f:指定原始编码
-t:指定转换的目标编码
-r:如果目标文件是一个目录，递归处理目录下的文件
--notest:转换后将文件重命名，默认情况下这个命令不会重命名文件
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pstree命令使用]]></title>
    <link href="http://calvinlee.github.io/blog/2012/05/28/pstree/"/>
    <updated>2012-05-28T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/05/28/pstree</id>
    <content type="html"><![CDATA[<p>pstree命令以树状形式显示运行中的进程，使用这个命令可以方便的查看进程之间的父子关系。
一些选项：</p>

<pre><code>-h：高亮当前进程
-p：显示进程pid
-u：显示uid
-a：显示启动进程的命令
-l：对长于132个字符会被截断显示，使用这个选项关闭这个功能
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.xinitrc and .xprofile]]></title>
    <link href="http://calvinlee.github.io/blog/2012/05/24/xinitrc-and-xprofile/"/>
    <updated>2012-05-24T00:00:00+08:00</updated>
    <id>http://calvinlee.github.io/blog/2012/05/24/xinitrc-and-xprofile</id>
    <content type="html"><![CDATA[<p>如果使用startx或者slim等命令启动X，会source ~/.xinitrc。<br/>
如果使用登录管理器GDM或者KDM，会source ~/.xprofile，忽略~/.xinitrc。</p>

<p>为了统一，干脆这样好了：</p>

<pre><code>ln -s ~/.xinitrc ~/.xprofile
</code></pre>
]]></content>
  </entry>
  
</feed>
